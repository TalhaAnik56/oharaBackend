# Generated by Django 5.0 on 2023-12-17 14:10

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('community', '0001_initial'),
        ('warehouse', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Cart',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deliveryFee', models.PositiveSmallIntegerField(default=50)),
                ('couponDiscount', models.PositiveSmallIntegerField(default=0)),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='SellerWallet',
            fields=[
                ('balance', models.PositiveIntegerField()),
                ('withdrawn', models.PositiveIntegerField()),
                ('totalAmount', models.PositiveIntegerField()),
                ('seller', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='community.seller')),
            ],
        ),
        migrations.CreateModel(
            name='CartItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unitPrice', models.PositiveSmallIntegerField()),
                ('quantity', models.PositiveSmallIntegerField(validators=[django.core.validators.MaxValueValidator(30, "You can't order more than 30 pieces")])),
                ('bookItem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='warehouse.bookitem')),
                ('cart', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='commerce.cart')),
            ],
        ),
        migrations.CreateModel(
            name='Coupon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('couponCode', models.SlugField(max_length=15)),
                ('discount', models.PositiveSmallIntegerField()),
                ('minimumPurchase', models.PositiveSmallIntegerField()),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='community.seller')),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('paymentStatus', models.CharField(choices=[('P', 'pending'), ('R', 'received'), ('F', 'failed')], default='P', max_length=1)),
                ('orderStatus', models.CharField(choices=[('C', 'confirmed'), ('O', 'delivery ongoing'), ('D', 'delivered'), ('F', 'failed')], default='C', max_length=1)),
                ('deliveryFee', models.PositiveSmallIntegerField()),
                ('deliveryAddress', models.CharField(max_length=150)),
                ('couponDiscount', models.PositiveSmallIntegerField()),
                ('createdAt', models.DateTimeField(auto_now_add=True)),
                ('customer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='community.customer')),
            ],
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveSmallIntegerField(validators=[django.core.validators.MaxValueValidator(30, "You can't order more than 30 pieces")])),
                ('unitPrice', models.PositiveSmallIntegerField()),
                ('bookItem', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='warehouse.bookitem')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='commerce.order')),
            ],
        ),
    ]
